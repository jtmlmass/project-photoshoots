version: "3.9"

networks:
  mi-red:
  db-user:
  db-compra:
  db-notificacion:

volumes:
  notificacion-db_volume:
  user-db_volume:
  compra-db_volume:

services:
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.8.1
  #   restart: always
  #   environment:
  #     - discovery.type=single-node
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   networks:
  #     - mi-red

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:7.8.1
  #   restart: always
  #   ports:
  #     - 5044:5044
  #   volumes:
  #     - "./archivos-configuracion/logstash/:/usr/share/logstash/pipeline/"
  #   networks:
  #     - mi-red
  #   depends_on:
  #     - elasticsearch

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.8.1
  #   restart: always
  #   ports:
  #     - 5601:5601
  #   networks:
  #     - mi-red
  #   depends_on:
  #     - elasticsearch
  #     - logstash
  #     - user-microservice

  # Servidor de configuracion
  config-server:
    build: ./servidor-configuracion
    restart: always
    environment:
      - EUREKA-SERVER=eureka-server
      # - LOGSTASH-SERVER=localhost
    ports:
      - 8888:8888
    networks:
      - mi-red
    volumes:
      - "./archivos-configuracion/config:/archivos-configuracion/config"

    healthcheck:
      test: curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1
      interval: 10s
      timeout: 2s
      retries: 10

    # depends_on:
    #   - logstash

  # Servidor de autodescubrimiento (Eureka)
  eureka-server:
    build: ./servidor-eureka
    restart: always
    environment:
      - CONFIG-SERVER=config-server
      # - LOGSTASH-SERVER=logstash
    ports:
      - 8761:8761
    networks:
      - mi-red
    depends_on: 
      - config-server
    
    healthcheck:
      test: curl --fail --silent eureka-server/actuator/health | grep UP || exit 1
      interval: 5s
      timeout: 2s
      retries: 10

  # Servidor Perimetral
  zulu-server:
    build: ./servidor-perimetral
    restart: always
    environment:
      - CONFIG-SERVER=config-server
      - EUREKA-SERVER=eureka-server
      # - LOGSTASH-SERVER=logstash
    ports:
      - 8080:8080
    networks:
      - mi-red
    depends_on:
      user-microservice:
        condition: "service_started"
      compra-microservice:
        condition: "service_started"
      notification-microservice:
        condition: "service_started"
      eureka-server:
        condition: "service_started"
      

  hystrix-server:
    build: servidor-monitoreo/final
    restart: always
    environment:
      - CONFIG-SERVER=config-server
      - EUREKA-SERVER=eureka-server
      # - LOGSTASH-SERVER=logstash
    ports:
      - 4444:4444
    networks:
      - mi-red
    depends_on:
      user-microservice:
        condition: "service_started"
      compra-microservice:
        condition: "service_started"
      notification-microservice:
        condition: "service_started"
      eureka-server:
        condition: "service_started"

  # Microservicio de usuarios
  user-db:
    image: buildo/h2database:2020-12-11
    restart: always
    ports:
      - 8082:8082
    networks:
      - db-user

  user-microservice:
    build: ./user-microservice
    restart: always
    environment:
      - CONFIG-SERVER=config-server
      - DB_HOST=user-db
      - DB_PORT=3306
      - EUREKA-SERVER=eureka-server
      # - LOGSTASH-SERVER=logstash
    networks:
      - mi-red
      - db-user
    depends_on:
      user-db:
        condition: "service_started"
      eureka-server:
        condition: "service_started"
  
  # Microservicio de compra de eventos
  compra-db:
    image: buildo/h2database:2020-12-11
    restart: always
    ports:
      - 8083:8082
    networks:
      - db-compra

  compra-microservice:
    build: ./compra-microservice
    restart: always
    environment:
      - CONFIG-SERVER=config-server
      - DB_HOST=compra-db
      - DB_PORT=3306
      - EUREKA-SERVER=eureka-server
      # - LOGSTASH-SERVER=logstash
    networks:
      - mi-red
      - db-compra
    depends_on:
      compra-db:
        condition: "service_started"
      eureka-server:
        condition: "service_started"
  
  # # Microservicio de notificaciones
  notificacion-db:
    image: buildo/h2database:2020-12-11
    restart: always
    ports:
      - 8084:8082
    networks:
      - db-notificacion

  notification-microservice:
    build: ./notification-microservice
    restart: always
    environment:
      - CONFIG-SERVER=config-server
      - DB_HOST=notificacion-db
      - DB_PORT=3306
      - EUREKA-SERVER=eureka-server
      # - LOGSTASH-SERVER=logstash
    networks:
      - mi-red
      - db-notificacion
    depends_on:
      notificacion-db:
        condition: "service_started"
      eureka-server:
        condition: "service_started"

  # Front-End
  # client-web:
  #   build: ./cliente-crud-estudiante/final
  #   restart: always
  #   environment:
  #     - CONFIG-SERVER=config-server
  #     - EUREKA-SERVER=eureka-server
  #     # - LOGSTASH-SERVER=logstash
  #   ports:
  #     - 8181:8181
  #   networks:
  #     - mi-red
  #   depends_on:
  #     - zulu-server

  #build: ./frontend
  cliente-frontend:
    build: ./cliente-frontend
    container_name: "cliente-frontend"
    ports:
      - 3003:3003
    networks:
      - mi-red
    stdin_open: true
